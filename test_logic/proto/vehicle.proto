// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: goServer.proto

syntax = "proto3";

package vehicleServer;
option go_package = ".;vehicleServer";

import "google/protobuf/timestamp.proto";

// Vehicle 메시지 정의
message Vehicle {
  int32 number = 1;      // 차량 번호
  string direction = 2;   // 방향
  int32 address = 3;      // 주소
  int32 send_votes = 4;        // 보내는 투표 수
  int32 receive_votes = 5; // 받은 투표 수    
  repeated Vehicle covehicle = 6; // 같은 방향 차량
  int32 random_number = 7;
  int32 license_plate = 8;
  google.protobuf.Timestamp election_time = 9; // 리더로 선출된 시각
  int32 election_vote = 10; //선출투표
}

// Request 메시지 정의
message Request {
  Vehicle vehicle = 1;    // 차량 정보
  string Port = 2;
  int32 total_vehicles = 3; // 총 차량 수
  int32 RandomNumber = 4;
}

// Response 메시지 정의
message Response {
  string message = 1;
  string status = 2;
  string direction_status = 3;
  string response_direction = 4;
  Vehicle vehicle = 5; // Vehicle 정보를 포함
}

service VehicleService {
  rpc ReceiveRequest (Request) returns (Response);
  rpc RandomAgreement (Request) returns (Response);
  rpc LeaderElection (Request) returns (Response);
  rpc UpdateVoteCount (Request) returns (Response);
}

// ConcurrentVehicle 메시지 정의
message ConcurrentVehicle {
  Vehicle vehicle = 1;    // 차량 정보
  ConcurrentVehicle next = 2; // 다음 ConcurrentVehicle 포인터
}

// VehicleRPC 메시지 정의
message VehicleRPC {
  int32 address = 1; // 주소
  map<int32, Vehicle> vehicles = 2; // 차량 맵
  int32 total_vehicles = 3; // 총 차량 수
  int32 vote_count = 4; // 투표 수
  ConcurrentVehicle concurrent_vehicle_list = 5; // ConcurrentVehicle 리스트
}